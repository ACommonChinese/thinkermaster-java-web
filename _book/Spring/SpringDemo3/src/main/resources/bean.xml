<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring管理-->
<<<<<<< Updated upstream
    <bean id="accountService"
          class="com.daliu.service.impl.AccountServiceImpl"
          scope="prototype"
          init-method="init"
          destroy-method="destroy"></bean>
=======
    <!--sprint对bean的管理细节
        1. 创建bean的三种方式
        2. bean对象的作用范围
        3. bean对象的生命周期
    -->

    <!--================-->
    <!--创建bean的三种方式-->
    <!--================-->
    <!--第一种方式：使用默认构造函数创建
    在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和签时
    采用的就是默认构造函数创建bean对象
    如果类中没有默认构造函数，对象无法创建-->
    <bean id="accountService" class="com.daliu.service.impl.AccountServiceImpl"></bean>

    <!--第二种方式：使用工厂中的实例方法创建对象(使用某个类中的实例方法创建对象并存入spring容器)-->
    <bean id="instanceFactory" class="com.daliu.factory.InstanceFactory"></bean>
    <bean id="accountService_2" factory-bean="instanceFactory" factory-method="getAccountService"></bean>

    <!--第三种方式：使用静态工厂中的静态方法创建对象(使用某个类中的静态方法创建对象并存入spring容器)-->
    <bean id="accountService_3" class="com.daliu.factory.StaticFactory" factory-method="getAccountService"></bean>

    <!--================-->
    <!--bean的作用范围-->
    <!--================-->
    <!--
    bean标签的scope属性：
    作用：指定bean的作用范围
    取值：
        singleton: 单例的（默认值）
        prototype: 多例的
        request: 作用于web应用的请求范围
        session: 作用于web应用的会话范围
        global-session：作用于集群环境的会话范围(当不是集群环境时，它就是session)
    -->
    <bean id="accountService_4" class="com.daliu.service.impl.AccountServiceImpl" scope="prototype"></bean>

    <!--================-->
    <!--bean对象的生命周期-->
    <!--================-->
    
>>>>>>> Stashed changes
</beans>
