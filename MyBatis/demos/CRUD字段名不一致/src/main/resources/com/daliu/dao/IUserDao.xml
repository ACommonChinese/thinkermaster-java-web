<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.daliu.dao.IUserDao">
    <!--配置查询结果的列名和实体类的属性名的对应关系-->
    <resultMap id="userMap" type="com.daliu.domain.User">
        <!--主键字段的对应-->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <!--查询所有-->
    <select id="findAll" resultType="com.daliu.domain.User" resultMap="userMap">
        select * from user;
        <!--select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday from user;-->
    </select>
    <!--保存-->
    <insert id="saveUser" parameterType="com.daliu.domain.User">
      insert into user(username, address, sex, birthday) values(#{userName}, #{userAddress}, #{userSex}, #{userBirthday})
      <!--注：#{address}默认执行的是getAddress()方法-->
    </insert>
    <!--新增用户返回自增长主键值-->
    <insert id="saveUser2" parameterType="com.daliu.domain.User">
        <!--keyProperty代表要返回的名称，即com.daliu.domain.User中的userId属性 order:取值为AFTER-->
        <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
          select last_insert_id();
        </selectKey>
        insert into user(username, birthday, sex, address) values(#{userName}, #{userBirthday}, #{userSex}, #{userAddress})
    </insert>
    <!--更新-->
    <update id="updateUser" parameterType="com.daliu.domain.User">
      update user set username = #{userName}, address = #{userAddress}, sex = #{userSex}, birthday = #{userBirthday} where id = #{userId}
    </update>
    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer"> <!--Integer, Int, int都可以-->
      delete from user where id = #{uid}
        <!--这里的{}中的uid只是起到占位符的意义，写什么都可以
        注：dao方法中deleteuser(Integer userId)中只有一个参数，而且是基本类型或基本类型包装类型，这种情况下占位符可以随意写-->
    </delete>
    <!--根据id查询用户-->
    <select id="findById" parameterType="int" resultType="com.daliu.domain.User">
      select * from user where id = #{uid}
    </select>
    <!--根据名称模糊查询-->
    <select id="findByName" parameterType="string" resultMap="userMap">
        select * from user where username like #{userName}
        <!--mybatis翻译为: select * from user where username like ?-->
    </select>
    <!--不常用方法：根据名称模糊查询-->
    <select id="findByName2" parameterType="string" resultMap="userMap">
        <!-- select * from user where username like #{name} -->
        <!-- 这种方法使用时传findByName2("龙") -->
        select * from user where username like '%${value}%'
        <!--mybatis翻译为: select * from user where username like '%龙'-->
    </select>
    <!--聚合函数，查询总用户数-->
    <select id="findTotal" resultType="int">
        select count(id) from user
    </select>
    <!--根据queryVo中的条件查询用户-->
    <select id="findUserByVo" parameterType="com.daliu.domain.QueryVo" resultMap="userMap">
      select * from user where username like #{user.userName}
    </select>
    <!--根据queryVo中的条件查询用户2-->
    <select id="findUserByVo2" parameterType="com.daliu.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{nameContainsDragon} <!--根据OGNL规范，这里相当于调用方法: voObj.getNameContainsDragon()-->
    </select>
</mapper>